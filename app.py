import gradio as gr
import os

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏°‡∏∂‡∏Å
def calculate_ink(
    density_current_black, density_target_black, ink_volume_black,
    density_current_blue, density_target_blue, ink_volume_blue,
    density_current_red, density_target_red, ink_volume_red,
    density_current_yellow, density_target_yellow, ink_volume_yellow
):
    k_values = {'‡∏î‡∏≥': 12, '‡∏ü‡πâ‡∏≤': 15, '‡πÅ‡∏î‡∏á': 15, '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á': 20}  
    densities = {
        "‚ö´Ô∏è ‡∏î‡∏≥": (density_current_black, density_target_black, ink_volume_black),
        "üîµ ‡∏ü‡πâ‡∏≤": (density_current_blue, density_target_blue, ink_volume_blue),
        "üî¥ ‡πÅ‡∏î‡∏á": (density_current_red, density_target_red, ink_volume_red),
        "üü° ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": (density_current_yellow, density_target_yellow, ink_volume_yellow),
    }

    results = []
    for color, (density_current, density_target, ink_volume) in densities.items():
        density_current = density_current or 0
        density_target = density_target or 0
        ink_volume = ink_volume or 0

        k_value = k_values[color.split(" ")[1]]  
        ink_adjustment_percent = k_value * (density_target - density_current)  
        ink_adjustment_kg = (ink_adjustment_percent / 100) * ink_volume  

        if ink_adjustment_kg != 0:
            action = "‡πÄ‡∏ï‡∏¥‡∏°" if ink_adjustment_kg > 0 else "‡∏•‡∏î"
            results.append(f"{color}: ‡∏ï‡πâ‡∏≠‡∏á {action} ‡∏´‡∏°‡∏∂‡∏Å {round(abs(ink_adjustment_kg), 2)} Kg")

    return "\n".join(results) if results else "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏™‡∏µ"

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤
def clear_inputs():
    return (None, None, None, None, None, None, None, None, None, None, None, None, "")

# üîπ ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á UI
with gr.Blocks() as demo:
    gr.Markdown("# üñåÔ∏è Ink Density Calculator")
    gr.Markdown("### ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Density ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏´‡∏°‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

    with gr.Row():
        gr.Markdown("**‡∏™‡∏µ**")
        gr.Markdown("**Density ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**")
        gr.Markdown("**Density ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢**")
        gr.Markdown("**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏´‡∏°‡∏∂‡∏Å‡πÉ‡∏ô‡∏ñ‡∏±‡∏á (Kg.)**")

    with gr.Row():
        gr.Markdown("‚ö´Ô∏è **‡∏î‡∏≥**")
        density_current_black = gr.Number()
        density_target_black = gr.Number()
        ink_volume_black = gr.Number()

    with gr.Row():
        gr.Markdown("üîµ **‡∏ü‡πâ‡∏≤**")
        density_current_blue = gr.Number()
        density_target_blue = gr.Number()
        ink_volume_blue = gr.Number()

    with gr.Row():
        gr.Markdown("üî¥ **‡πÅ‡∏î‡∏á**")
        density_current_red = gr.Number()
        density_target_red = gr.Number()
        ink_volume_red = gr.Number()

    with gr.Row():
        gr.Markdown("üü° **‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á**")
        density_current_yellow = gr.Number()
        density_target_yellow = gr.Number()
        ink_volume_yellow = gr.Number()

    with gr.Row():
        calculate_button = gr.Button("üî• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        clear_button = gr.Button("‚ôªÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤")

    output_result = gr.Textbox(label="üìå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", lines=8, interactive=False)

    calculate_button.click(
        fn=calculate_ink,
        inputs=[
            density_current_black, density_target_black, ink_volume_black,
            density_current_blue, density_target_blue, ink_volume_blue,
            density_current_red, density_target_red, ink_volume_red,
            density_current_yellow, density_target_yellow, ink_volume_yellow,
        ],
        outputs=output_result,
    )

    clear_button.click(
        fn=clear_inputs,
        inputs=[],
        outputs=[
            density_current_black, density_target_black, ink_volume_black,
            density_current_blue, density_target_blue, ink_volume_blue,
            density_current_red, density_target_red, ink_volume_red,
            density_current_yellow, density_target_yellow, ink_volume_yellow,
            output_result,
        ],
    )

# üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Web App ‡∏ö‡∏ô Render
port = int(os.getenv("PORT", 7860))  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ PORT ‡∏à‡∏≤‡∏Å Render
demo.launch(server_name="0.0.0.0", server_port=port)
